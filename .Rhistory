}
if(!grepl(".csv$", file_2)){
stop("Uploaded meta_file must be a .csv file!")
}
genomic_data = read.csv(file_1)
metadata = read.csv(file_2)
#make gene names as row names
rownames(genomic_data) = make.names(genomic_data[,1],unique = TRUE)
genomic_data = genomic_data[,2:ncol(genomic_data)]
genomic_data = as.data.frame(sapply(genomic_data,as.numeric))
genomic_data = na.omit(genomic_data)
t_genomic_data = as.data.frame(t(genomic_data))
t_genomic_data = na.omit(t_genomic_data)
t_genomic_data.pca = prcomp(t_genomic_data,scale. = TRUE,center = TRUE)
#fviz_pca_var(t_genomic_data.pca,
#             col.var = "contrib", # Color by contributions to the PC
#             gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
#             repel = TRUE )
autoplot(t_genomic_data.pca,data=metadata,colour="Time")
}
autoplot(t_genomic_data.pca,data=metadata,colour="Time")
autoplot(t_genomic_data.pca)
autoplot(t_genomic_data.pca,data=metadata,colour="Time")
metadata["Time"]
t_genomic_data.pca
autoplot(t_genomic_data.pca,data=metadata,colour="Time")
rownames(t_genomic_data)
metadata["Time"]
t_genomic_data.pca
t_genomic_data
t_genomic_data.pca[0]
t_genomic_data.pca[1]
t_genomic_data.pca[2]
t_genomic_data.pca[3]
t_genomic_data.pca[1]
rownames(t_genomic_data)
t_genomic_data[0]
t_genomic_data[1]
t_genomic_data[1,]
t_genomic_data[1,5]
t_genomic_data[1,2:4]
genomic_data = read.csv("data/Assignment-2_gene_data.csv")
metadata = read.csv("data/Assignment-2 Meta data sheet .csv")
genomic_data
genomic_data[1,]
genomic_data[,1]
genomic_data[1,1]
genomic_data[1:5,1]
#make gene names as row names
rownames(genomic_data) = make.names(genomic_data[,2],unique = TRUE)
genomic_data = genomic_data[,2:ncol(genomic_data)]
genomic_data = as.data.frame(sapply(genomic_data,as.numeric))
genomic_data = na.omit(genomic_data)
t_genomic_data = as.data.frame(t(genomic_data))
t_genomic_data = na.omit(t_genomic_data)
t_genomic_data.pca = prcomp(t_genomic_data,scale. = TRUE,center = TRUE)
autoplot(t_genomic_data.pca,data=metadata,colour="Time")
#' Make Scatter Plot of PCA
#'
#' This functions creates a scatter plot of most significant Principal Components
#'
#' @export
#' @param file_1 main genomic file
#' @param file_2 metadata file
PCA2_plot <- function(file_1,file_2,...) {
library(ggfortify)
if(!grepl(".csv$", file_1)){
stop("Uploaded genomic file must be a .csv file!")
}
if(!grepl(".csv$", file_2)){
stop("Uploaded meta_file must be a .csv file!")
}
genomic_data = read.csv(file_1)
metadata = read.csv(file_2)
#make gene names as row names
rownames(genomic_data) = make.names(genomic_data[,2],unique = TRUE)
genomic_data = genomic_data[,2:ncol(genomic_data)]
genomic_data = as.data.frame(sapply(genomic_data,as.numeric))
genomic_data = na.omit(genomic_data)
t_genomic_data = as.data.frame(t(genomic_data))
t_genomic_data = na.omit(t_genomic_data)
t_genomic_data.pca = prcomp(t_genomic_data,scale. = TRUE,center = TRUE)
#fviz_pca_var(t_genomic_data.pca,
#             col.var = "contrib", # Color by contributions to the PC
#             gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
#             repel = TRUE )
autoplot(t_genomic_data.pca,data=metadata,colour="Time")
}
autoplot(t_genomic_data.pca,data=metadata,colour="Time")
rm(list= ls())
metadata = read.csv("data/Assignment-2 Meta data sheet .csv")
genomic_data = read.csv("data/Assignment-2_gene_data.csv")
#make gene names as row names
rownames(genomic_data) = make.names(genomic_data[,2],unique = TRUE)
genomic_data[1,1]
genomic_data[2,1]
genomic_data[3,1]
genomic_data[3,1:2]
genomic_data = genomic_data[,3:ncol(genomic_data)]
genomic_data[3,1:2]
genomic_data = as.data.frame(sapply(genomic_data,as.numeric))
genomic_data = na.omit(genomic_data)
t_genomic_data = as.data.frame(t(genomic_data))
t_genomic_data = na.omit(t_genomic_data)
t_genomic_data.pca = prcomp(t_genomic_data,scale. = TRUE,center = TRUE)
autoplot(t_genomic_data.pca,data=metadata,colour="Time")
install.packages("opencpu")
install.packages(devtool)
library(devtools)
library(opencpu)
library(devtools)
library(opencpu)
ocpu_start_app("sudarshanYadav/genomicPCA")
install.packages("ggfortify")
remove_apps("sudarshanYadav/genomicPCA")
ocpu_start_app("sudarshanYadav/genomicPCA")
genomirm(list = ls())
rm(list = ls())
genomic_data =  read.csv("data/Assignment-2_gene_data")
genomic_data =  read.csv("data/Assignment-2_gene_data.csv")
metadata = read.csv("data/Assignment-2 Meta data sheet.csv")
metadata = read.csv("Assignment-2 Meta data sheet .csv")
metadata = read.csv("data/Assignment-2 Meta data sheet .csv")
#make gene names as row names
rownames(genomic_data) = make.names(genomic_data[,2],unique = TRUE)
genomic_data = genomic_data[,3:ncol(genomic_data)]
genomic_data = as.data.frame(sapply(genomic_data,as.numeric))
genomic_data = na.omit(genomic_data)
t_genomic_data = as.data.frame(t(genomic_data))
t_genomic_data = na.omit(t_genomic_data)
t_genomic_data.pca = prcomp(t_genomic_data,scale. = TRUE,center = TRUE)
autoplot(t_genomic_data.pca,data=metadata,colour="Time")
library(ggfortify)
autoplot(t_genomic_data.pca,data=metadata,colour="Time")
pca_components = as.data.frame(t_genomic_data.pca)
pca_components = (t_genomic_data.pca)
pca_components
pca_components["PC1"]
colnames(pca_components)
typeof(pca_components)
as.datta.frame(pca_components)
as.data.frame(pca_components)
pca_components[[0]]
pca_components[["PC1"]]
pca_components[5]
pca_components[0]
pca_components[1]
pca_components[2]
pca_components[2]["PC1"]
typeof(pca_components[2])
(pca_components[2])[2]
(pca_components[2])
as.data.frame(pca_components[2])
as.data.frame(pca_components[2])["rotation.PC1"]
as.data.frame(pca_components[2])["rotation.PC1",2:]
as.data.frame(pca_components[2])["rotation.PC1"][0]
as.data.frame(pca_components[2])["rotation.PC1"][9]
as.data.frame(pca_components[2])["rotation.PC1"]
colnames(as.data.frame(pca_components[2])["rotation.PC1"])
pc1 = as.data.frame(pca_components[2])["rotation.PC1"])
pc1 = as.data.frame(pca_components[2])["rotation.PC1"]
pc2 = as.data.frame(pca_components[2])["rotation.PC2"]
pc1[5]
pc1[[5]]
typeof(pc1)
pc1[2]
pc1[,2]
library(plotly)
install.packages("plotly")
libra
library(plotly)
library(plotly)
pca_components
pca_components[2]
pca_components[2]
pca_components[2]["pc1"]
pca_components[2]["PC1"]
typeof(pca_components[2])
colnames(pca_components[2])
rownames(pca_components[2])
as.data.frame(pca_components[2])
pca_comp = as.data.frame(pca_components[2])
plot_ly(d, x = rotation.PC1 y = rotation.PC2)
plot_ly(d, x = rotation.PC1, y = rotation.PC2)
plot_ly(pca_comp, x = rotation.PC1, y = rotation.PC2)
plot_ly(pca_comp, x = "rotation.PC1", y = "rotation.PC2")
plot_ly(pca_comp, x = "rotation.PC1", y = "rotation.PC2",mode = "markers")
plot_ly(pca_comp, x = pca_comp$rotation.PC1, y = pca_comp$rotation.PC2,mode = "markers")
pca_comp$rotation.PC1
pca_comp
pca_comp
pca_comp$rotation.PC1
plot_ly(pca_comp, x = rotation.PC1, y =rotation.PC2,mode = "markers")
plot_ly(pca_comp, x = ~rotation.PC1, y =~rotation.PC2,mode = "markers")
rownames(pca_comp)
colnames(pca_comp)
rownames(pca_comp)
pca_comp[0,1]
pca_comp[2,1]
pca_comp[2,1]
pca_comp[1,1]
pca_comp[1:4,1:4]
pca_components$x
typeof(pca_components$x)
pca_components$x
pca_components$x[1]
pca_components$x[30]
pca_components$x[31]
pca_components$x[90]
pca_components$x
as.data.frame(pca_components$x)
as.data.frame(pca_components$x)$PC1
as.data.frame(pca_components$x)$PC2
pca_values = as.data.frame(pca_components$x)
pca_values
plot_y(pca_values, x = PC1, y = PC2,)
plot_y(pca_values, x = PC1, y = PC2)
library(plotly)
plot_y(pca_values, x = PC1, y = PC2)
plotl_y(pca_values, x = PC1, y = PC2)
plot_ly(pca_values, x = PC1, y = PC2)
plot_y(pca_values, x = PC1, y = PC2)
plot_ly(pca_values, x = PC1, y = PC2,)
plot_ly(pca_values, x =~PC1, y = ~PC2,)
plot_ly(pca_values, x =~PC1, y = ~PC2)
genomic_data = na.omi
genomic_data = na.omit(genomic_data)
genomic_data.pca = prcomp(genomic_data,scale. = TRUE,center = TRUE)
autoplot(genomic_data.pca,data=metadata,colour="Time")
install.packages("ggbiplot")
ggbiplot(genomic_data.pca)
install_github("vqv/ggbiplot")
ggbiplot(genomic_data.pca)
library(ggbiplot)
ggbiplot(genomic_data.pca)
ggbiplot(genomic_data.pca,ellipse=TRUE,obs.scale = 1, var.scale = 1, groups=metadata$Time) +
scale_colour_manual(name="Legend", values= c("forest green", "red3", "dark blue"))+
ggtitle("PCA of genomic dataset")+
theme_minimal()+
theme(legend.position = "bottom")
ggbiplot(genomic_data.pca,ellipse=TRUE,obs.scale = 1, var.scale = 1, groups=metadata.Time) +
scale_colour_manual(name="Legend", values= c("forest green", "red3", "dark blue"))+
ggtitle("PCA of genomic dataset")+
theme_minimal()+
theme(legend.position = "bottom")
ggbiplot(genomic_data.pca,ellipse=TRUE,obs.scale = 1, var.scale = 1, groups=metadata$Time) +
scale_colour_manual(name="Legend", values= c("forest green", "red3", "dark blue"))+
ggtitle("PCA of genomic dataset")+
theme_minimal()+
theme(legend.position = "bottom")
meta
metadata$Time
as.character(metadata$Time)
ggbiplot(genomic_data.pca,ellipse=TRUE,obs.scale = 1, var.scale = 1, groups=as.character(metadata$Time) +
ggbiplot(genomic_data.pca,ellipse=TRUE,obs.scale = 1, var.scale = 1, groups=as.character(metadata$Time)) +
scale_colour_manual(name="Legend", values= c("forest green", "red3", "dark blue"))+
ggtitle("PCA of genomic dataset")+
theme_minimal()+
theme(legend.position = "bottom")
ggbiplot(genomic_data.pca,ellipse=TRUE,obs.scale = 1, var.scale = 1, groups=as.character(metadata$Time)) +
scale_colour_manual(name="Legend", values= c("forest green", "red3", "dark blue"))+
ggtitle("PCA of genomic dataset")+
theme_minimal()+
theme(legend.position = "bottom")
ggbiplot(genomic_data.pca,ellipse=TRUE,obs.scale = 1, var.scale = 1, groups=as.character(metadata$Time)) +
scale_colour_manual(name="Legend", values= c("forest green", "red3", "dark blue"))+
ggtitle("PCA of genomic dataset")+
theme_minimal()+
theme(legend.position = "bottom")
ggbiplot(genomic_data.pca,ellipse=TRUE,obs.scale = 1, var.scale = 1, groups=as.character(metadata$Time)) +
ggtitle("PCA of genomic dataset")+
theme_minimal()+
theme(legend.position = "bottom")
plot_ly(pca_values, x =~PC1, y = ~PC2)
plot_ly(pca_values, x =~PC1, y = ~PC2, text = metadata$sIdx,
mode = "markers", color = metadata$Time, marker = list(size = 11))
plot_ly(pca_values, x =~PC1, y = ~PC2, text = paste("SampleName",metadata$sIdx),
mode = "markers", color = metadata$Time, marker = list(size = 11))
plot_ly(pca_values, x =~PC1, y = ~PC2, text = paste("SampleName :",metadata$sIdx,"Time : ","123"),
mode = "markers", color = metadata$Time, marker = list(size = 11))
plot_ly(pca_values, x =~PC1, y = ~PC2, text = paste("SampleName :",metadata$sIdx,"Time : ",metadata$Time),
mode = "markers", color = metadata$Time, marker = list(size = 11))
plot_ly(pca_values, x =~PC1, y = ~PC2, text = paste("SampleName :",metadata$sIdx,"Time : ",metadata$Time," ",metadata$Unit),
mode = "markers", color = metadata$Time, marker = list(size = 11))
pca_values$x
pca_comp = as.data.frame(pca_components[2])
plot_ly(pca_comp, x = ~rotation.PC1, y =~rotation.PC2,mode = "markers")
rm(list=ls())
genomic_data = read.csv("data/Assignment-2_gene_data.csv")
metadata = read.csv("data/Assignment-2 Meta data sheet .csv")
#make gene names as row names
rownames(genomic_data) = make.names(genomic_data[,2],unique = TRUE)
genomic_data = genomic_data[,3:ncol(genomic_data)]
genomic_data = as.data.frame(sapply(genomic_data,as.numeric))
genomic_data = na.omit(genomic_data)
genomic_data.pca = prcomp(genomic_data,scale. = TRUE,center = TRUE)
autoplot(genomic_data.pca,data=metadata,colour="Time")
autoplot(genomic_data.pca,data=metadata,colour="Time")genomic_data.pca[2]
genomic_data.pca[2]
plot_ly(genomic_data.pca[2], x = ~PC1, y = ~PC2)
as.data.frame(genomic_data.pca[2])
plot_ly(as.data.frame(genomic_data.pca[2]), x = ~rotation.PC1, y = ~rotation.PC2)
plot_ly(as.data.frame(genomic_data.$x), x = ~PC1, y = ~PC2)
plot_ly(as.data.frame(genomic_data$x), x = ~PC1, y = ~PC2)
genomic_data.$x
genomic_data$x
genomic_data.$x
genomic_data.pca$x
plot_ly(as.data.frame(genomic_data.pca$x), x = ~PC1, y = ~PC2)
ggbiplot(genomic_data.pca,ellipse=TRUE, groups=metadata$Time)
plot_ly(as.data.frame(genomic_data.pca$x), x = ~PC1, y = ~PC2)
plot_ly(as.data.frame(genomic_data.pca[2]), x = ~rotation.PC1, y = ~rotation.PC2)
,
plot_ly(as.data.frame(genomic_data.pca$x), x = ~PC1, y = ~PC2)
autoplot(genomic_data.pca,loadings=TRUE)
plot_ly(as.data.frame(genomic_data[2]), x = ~rotation.PC1, y = ~rotation.PC2)
genomic_data[2]
plot_ly(as.data.frame(genomic_data.pca[2]), x = ~rotation.PC1, y = ~rotation.PC2)
plot_ly(as.data.frame(genomic_data.pca[2]), x = ~rotation.PC1, y = ~rotation.PC2,color = metadata$Time)
plot_ly(as.data.frame(genomic_data.pca[2]), x = ~rotation.PC1, y = ~rotation.PC2,color = as.character(metadata$Time)
plot_ly(as.data.frame(genomic_data.pca[2]), x = ~rotation.PC1, y = ~rotation.PC2,color = as.character(metadata$Time))
plot_ly(as.data.frame(genomic_data.pca[2]), x = ~rotation.PC1, y = ~rotation.PC2,color = as.character(metadata$Time))
plot_ly(as.data.frame(genomic_data.pca[2]), x = ~rotation.PC1, y = ~rotation.PC2,mode="lines+marker",color = as.character(metadata$Time))
plot_ly(as.data.frame(genomic_data.pca[2]), x = ~rotation.PC1, y = ~rotation.PC2,color = as.character(metadata$Time))
,mode="lines+marker"
plot_ly(as.data.frame(genomic_data.pca[2]), x = ~rotation.PC1, y = ~rotation.PC2,mode="lines+marker",color = as.character(metadata$Time))
plot_ly(as.data.frame(genomic_data.pca[2]), x = ~rotation.PC1, y = ~rotation.PC2,color = as.character(metadata$Time))
mode="lines+marker",
plot_ly(as.data.frame(genomic_data.pca[2]), x = ~rotation.PC1, y = ~rotation.PC2,mode="lines+marker",color = as.character(metadata$Time))
autoplot(genomic_data.pca)
autoplot(genomic_data.pca,loadings=TRUE)
autoplot(genomic_data.pca,loadings=TRUE,loadings.colour = metadata$Time)
autoplot(genomic_data.pca,loadings=TRUE,loadings.colour = metadata$Time)
autoplot(genomic_data.pca,loadings=TRUE,loadings.colour = as.character(metadata$Time))
autoplot(genomic_data.pca,loadings=TRUE,loadings.colour = "blue")
autoplot(genomic_data.pca,loadings=TRUE,loadings.colour = "blue",frame=TRUE)
autoplot(genomic_data.pca,loadings=TRUE,frame=TRUE)
plot_ly(as.data.frame(genomic_data.pca[2]), x = ~rotation.PC1, y = ~rotation.PC2,mode="lines+marker",color = as.character(metadata$Time))
autoplot(genomic_data.pca,loadings=TRUE,frame=TRUE)
autoplot(genomic_data.pca,data=metadata,colour=metadata$Time)
autoplot(genomic_data.pca,data=metadata,loadings=TRUE)
autoplot(genomic_data.pca,data=metadata,loadings=TRUE,loadings.colour = metadata$Time)
autoplot(genomic_data.pca,data=metadata,loadings=TRUE,loadings.colour = metadata$Unit)
autoplot(genomic_data.pca,data=metadata,loadings=TRUE)
autoplot(genomic_data.pca,data=metadata,loadings=TRUE,loadings.labels=TRUE)
autoplot(genomic_data.pca,data=metadata,loadings=TRUE,loadings.label=TRUE)
autoplot(genomic_data.pca,data=metadata,loadings=TRUE,loadings.label=metadata$Time)
autoplot(genomic_data.pca,data=metadata,loadings=TRUE,loadings.label=metadata$Time,loadings.label.size =4 )
genomic_data.pca[2]
t(genomic_data.pca[2])
t_pca = t(genomic_data.pca[2])
t_pca
geno
genomic_data[2]
genomic_data.pca[2]
t(genomic_data.pca[2])
t(as.data.frame(genomic_data.pca[2]))
t(genomic_data.pca[2])
genomic_data.pca[2]
as.data.frame(genomic_data.pca[2])
as.data.frame(genomic_data.pca[2])[1:2,]
as.data.frame(genomic_data.pca[2])[,1:2]
plot_ly(as.data.frame(genomic_data.pca[2]), x = ~rotation.PC1, y = ~rotation.PC2,mode="lines+marker",color = as.character(metadata$Time))
plot_ly(as.data.frame(genomic_data.pca$x), x = ~PC1, y = ~PC2)
plot_ly(as.data.frame(genomic_data.pca$x), x = ~PC1, y = ~PC2,text = paste("Gene : ", rownames(genomic_data)))
rownames(genomic_data)
#make gene names as row names
rownames(genomic_data) = make.names(genomic_data[,2],unique = TRUE)
genomic_data = genomic_data[,3:ncol(genomic_data)]
rownames(genomic_data)
rm(list=ls())
genomic_data =read.csv("data/Assignment-2_gene_data.csv")
metadata = read.csv("data/Assignment-2 Meta data sheet .csv")
#make gene names as row names
rownames(genomic_data) = make.names(genomic_data[,2],unique = TRUE)
genomic_data = genomic_data[,3:ncol(genomic_data)]
genomic_data = as.data.frame(sapply(genomic_data,as.numeric))
genomic_data = na.omit(genomic_data)
t_genomic_data = as.data.frame(t(genomic_data))
t_genomic_data = na.omit(t_genomic_data)
genomic_data.pca = prcomp(genomic_data,scale. = TRUE,center = TRUE)
plot_ly(as.data.frame(genomic_data.pca$x), x = ~PC1, y = ~PC2,text = paste("Gene : ", rownames(genomic_data)))
#make gene names as row names
rownames(genomic_data) = make.names(genomic_data[,2],unique = TRUE)
plot_ly(as.data.frame(genomic_data.pca$x), x = ~PC1, y = ~PC2,text = paste("Gene : ", rownames(genomic_data)))
metadata = read.csv("data/Assignment-2 Meta data sheet .csv")
genomic_data =read.csv("data/Assignment-2_gene_data.csv")
rownames(genomic_data)
#make gene names as row names
rownames(genomic_data) = make.names(genomic_data[,2],unique = TRUE)
rownames(genomic_data)
genomic_data = genomic_data[,3:ncol(genomic_data)]
rownames(genomic_data)
genomic_data = as.data.frame(sapply(genomic_data,as.numeric))
genomic_data = na.omit(genomic_data)
t_genomic_data = as.data.frame(t(genomic_data))
t_genomic_data = na.omit(t_genomic_data)
genomic_data.pca = prcomp(genomic_data,scale. = TRUE,center = TRUE)
plot_ly(as.data.frame(genomic_data.pca$x), x = ~PC1, y = ~PC2,text = paste("Gene : ", rownames(genomic_data)))
plot_ly(as.data.frame(genomic_data.pca$x), x = ~PC1, y = ~PC2,text = paste("Gene : ", rownames(genomic_data)))
metadata = read.csv("data/Assignment-2 Meta data sheet .csv")
genomic_data =read.csv("data/Assignment-2_gene_data.csv")
#make gene names as row names
rownames(genomic_data) = make.names(genomic_data[,2],unique = TRUE)
genomic_data = genomic_data[,3:ncol(genomic_data)]
genomic_data = as.data.frame(sapply(genomic_data,as.numeric))
genomic_data = na.omit(genomic_data)
t_genomic_data = as.data.frame(t(genomic_data))
t_genomic_data = na.omit(t_genomic_data)
genomic_data.pca = prcomp(genomic_data,scale. = TRUE,center = TRUE)
plot_ly(as.data.frame(genomic_data.pca$x), x = ~PC1, y = ~PC2,text = paste("Gene : ", rownames(genomic_data)))
rownames(genomic_data)
metadata = read.csv("data/Assignment-2 Meta data sheet .csv")
genomic_data =read.csv("data/Assignment-2_gene_data.csv")
#make gene names as row names
rownames(genomic_data) = make.names(genomic_data[,2],unique = TRUE)
genomic_data = genomic_data[,3:ncol(genomic_data)]
rownames(genomic_data)
genomic_data[1:2,1:2]
genomic_data = as.data.frame(sapply(genomic_data,as.numeric))
genomic_data[1:2,1:2]
metadata = read.csv("data/Assignment-2 Meta data sheet .csv")
genomic_data =read.csv("data/Assignment-2_gene_data.csv")
#make gene names as row names
genomic_data = as.data.frame(sapply(genomic_data,as.numeric))
genomic_data = na.omit(genomic_data)
rownames(genomic_data) = make.names(genomic_data[,2],unique = TRUE)
genomic_data = genomic_data[,3:ncol(genomic_data)]
genomic_data.pca = prcomp(genomic_data,scale. = TRUE,center = TRUE)
plot_ly(as.data.frame(genomic_data.pca$x), x = ~PC1, y = ~PC2,text = paste("Gene : ", rownames(genomic_data)))
plot_ly(as.data.frame(genomic_data.pca[2]), x = ~rotation.PC1, y = ~rotation.PC2,mode="lines+marker",color = as.character(metadata$Time))
plot_ly(as.data.frame(genomic_data.pca[2]), x = ~rotation.PC1, y = ~rotation.PC2,mode="lines+marker",color = as.character(metadata$Time),text = paste(" Sample : ",metadata$sIdx,"\nTime : ",metadata$Time," ",metadata$Unit))
plot_ly(as.data.frame(genomic_data.pca[2]), x = ~rotation.PC1, y = ~rotation.PC2,mode="lines+marker",color = as.character(metadata$Time),text = paste("Sample : ",metadata$sIdx,"\nTime : ",metadata$Time," ",metadata$Unit))
install.packages("ggfortify")
remove_apps("sudarshanYadav/genomicPCA")
ocpu_start_app("sudarshanYadav/genomicPCA")
remove_apps("sudarshanYadav/genomicPCA")
ocpu_start_app("sudarshanYadav/genomicPCA")
library(opencpu)
ocpu_start_app("sudarshanYadav/genomicPCA")
ocpu_start_server()
remove_apps("sudarshanYadav/genomicPCA")
ocpu_start_server()
ocpu_start_app("sudarshanYadav/genomicPCA")
remove_apps("sudarshanYadav/genomicPCA")
remove_apps("sudarshanYadav/genomicPCA")
ocpu_start_app("sudarshanYadav/genomicPCA")
ocpu_start_server()
remove_apps("sudarshanYadav/genomicPCA")
ocpu_start_app("sudarshanYadav/genomicPCA")
ocpu_start_app("rwebapps/leafletapp")
remove_apps("sudarshanyadav/genomicPCA")
ocpu_start_app("sudarshanYadav/genomicPCA")
yaxis = list(title = 'Brain Weight (g)'
)))
#pca_graph_1 =
plot_ly(as.data.frame(genomic_data.pca$x),
x = ~PC1, y = ~PC2,
text = paste("Gene : ", rownames(genomic_data)))
#pca_graph_1 =
plot_ly(as.data.frame(genomic_data.pca$x),
x = ~PC1, y = ~PC2,
text = paste("Gene : ", rownames(genomic_data)),
layout(title = 'Primates Brain and Body Weight',
xaxis = list(title = 'Body Weight (kg)',
zeroline = TRUE),
yaxis = list(title = 'Brain Weight (g)')))
#pca_graph_1 =
plot_ly(as.data.frame(genomic_data.pca$x),
x = ~PC1, y = ~PC2,
text = paste("Gene : ", rownames(genomic_data)) %>%
layout(title = 'Primates Brain and Body Weight',
xaxis = list(title = 'Body Weight (kg)',
zeroline = TRUE),
yaxis = list(title = 'Brain Weight (g)')))
pca_graph_1 = plot_ly(as.data.frame(genomic_data.pca$x), x = ~PC1, y = ~PC2,text = paste("Gene : ", rownames(genomic_data)))
pca_graph_1 = plot_ly(as.data.frame(genomic_data.pca$x), x = ~PC1, y = ~PC2,text = paste("Gene : ", rownames(genomic_data))) %>%
layout(
title = "Layout options in a 3d scatter plot",
scene = list(
xaxis = list(title = "Cos"),
yaxis = list(title = "Sin"),
zaxis = list(title = "Z")
))
plot_ly(as.data.frame(genomic_data.pca$x), x = ~PC1, y = ~PC2,text = paste("Gene : ", rownames(genomic_data))) %>%
layout(
title = "Layout options in a 3d scatter plot",
scene = list(
xaxis = list(title = "Cos"),
yaxis = list(title = "Sin"),
zaxis = list(title = "Z")
))
pca_graph_2 = plot_ly(as.data.frame(genomic_data.pca[2]), x = ~rotation.PC1, y = ~rotation.PC2,mode="lines+marker",color = as.character(metadata$Time),text = paste("Sample : ",metadata$sIdx,"\nTime : ",metadata$Time," ",metadata$Unit)) %>%
layout(
title = "Loadings graph with Principal Components",
scene = list(
xaxis = list(title = "PC1"),
yaxis = list(title = "PC2")
))
plot_ly(as.data.frame(genomic_data.pca[2]), x = ~rotation.PC1, y = ~rotation.PC2,mode="lines+marker",color = as.character(metadata$Time),text = paste("Sample : ",metadata$sIdx,"\nTime : ",metadata$Time," ",metadata$Unit)) %>%
layout(
title = "Loadings graph with Principal Components",
scene = list(
xaxis = list(title = "PC1"),
yaxis = list(title = "PC2")
))
remove_apps("sudarshanyadav/genomicData")
ocpu_start_app("sudarshanYadav/genomicData")
ocpu_start_app("sudarshanYadav/genomicData")
ocpu_start_server()
remove_apps("sudarshanyadav/genomicData")
ocpu_start_app("sudarshanYadav/genomicData")
