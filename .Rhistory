library("ggbipllit")
library("ggbiplot")
install.packages("ggbiplot")
library(ggfortify)
install.packages("ggfortify")
library(ggfortify)
autoplot(t_genomic_data.pca)
genomic_data = read.csv("data/Assignment-2_gene_data.csv")
#make gene names as row names
rownames(genomic_data) = make.names(genomic_data[,1],unique = TRUE)
genomic_data = genomic_data[,2:ncol(genomic_data)]
genomic_data = as.data.frame(sapply(genomic_data,as.numeric))
t_genomic_data = as.data.frame(t(genomic_data))
t_genomic_data = na.omit(t_genomic_data)
t_genomic_data.pca = prcomp(t_genomic_data,scale. = TRUE,center = TRUE)
autoplot(t_genomic_data.pca)
t_genomic_data.pca = prcomp(genomic_data,scale. = TRUE,center = TRUE)
genomic_data =na.omit(genomic_data)
t_genomic_data.pca = prcomp(genomic_data,scale. = TRUE,center = TRUE)
autoplot(t_genomic_data.pca)
t_genomic_data.pca = prcomp(genomic_data,scale. = TRUE)
autoplot(t_genomic_data.pca)
t_genomic_data.pca = prcomp(genomic_data,scale. = TRUE,center = TRUE)
t_genomic_data.pca = prcomp(t_genomic_data,scale. = TRUE,center = TRUE)
autoplot(t_genomic_data.pca)
autoplot(t_genomic_data.pca,loadings=TRUE)
}
autoplot(t_genomic_data.pca,loadings=TRUE)
autoplot(t_genomic_data.pca)
metadata = read.csv("data/Assignment-2 Meta data sheet .csv")
metadata
metadata[3]
autoplot(t_genomic_data.pca,color=metadata[,3])
autoplot(t_genomic_data.pca,colour=metadata[,3])
autoplot(t_genomic_data.pca,data=metadata,colour=metadata[,3])
metadata[2]
autoplot(t_genomic_data.pca,data=metadata,colour=metadata[,2])
autoplot(t_genomic_data.pca,data=metadata,colour="Time")
library(genomicPCA)
library(devtools)
library(opencpu)
install.packages(opencpu)
install.packages("opencpu")
library(genomicPCA)
install_github("genomicPCA","sudarshanYadav")
library(devtools)
install_github("genomicPCA","sudarshanYadav")
install_github("genomicPCA","SudarshanYadav")
install_github("genomicPCA","SudarshanYadav")
install_github("sudarshanYadav/genomicPCA")
library(opencpu)
ocpu_start_app("sudarshanYadav/genomicPCA")
#install app
library(devtools)
install_github("appdemo", "opencpu")
#load in opencpu
library(opencpu)
opencpu$browse("/library/appdemo/www")
install_github("appdemo",opencpu)
install_github("appdemo", "opencpu")
opencpu$browse("/library/appdemo/www")
library(opencpu)
opencpu$browse("/library/appdemo/www")
ocpu_start_app("sudarshanYadav/genomicPCA")
ocpu_start_app("sudarshanYadav/genomicPCA")
rm(list=ls())
ocpu_start_app("sudarshanYadav/genomicPCA")
library(genomicPCA)
?open
file1 <- open("data/Assignment-2_gene_data.csv")
file1 <- openFile("data/Assignment-2_gene_data.csv")
PCA2_plot("data/Assignment-2_gene_data.csv","data/Assignment-2 Meta data sheet .csv")
library(genomicPCA)
PCA2_plot("data/Assignment-2_gene_data.csv","data/Assignment-2 Meta data sheet .csv")
library(genomicPCA)
install.packages("ggfortify")
PCA2_plot("data/Assignment-2_gene_data.csv","data/Assignment-2 Meta data sheet .csv")
genomic_data = pd.read_csv("data/Assignment-2_gene_data.csv")
genomic_data = read.csv("data/Assignment-2_gene_data.csv")
metadata = read.csv("data/Assignment-2 Meta data sheet .csv")
#make gene names as row names
rownames(genomic_data) = make.names(genomic_data[,1],unique = TRUE)
genomic_data = genomic_data[,2:ncol(genomic_data)]
genomic_data = as.data.frame(sapply(genomic_data,as.numeric))
genomic_data = na.omit(genomic_data)
t_genomic_data = as.data.frame(t(genomic_data))
t_genomic_data = na.omit(t_genomic_data)
t_genomic_data.pca = prcomp(t_genomic_data,scale. = TRUE,center = TRUE)
autoplot(t_genomic_data.pca,data=metadata,colour="Time")
#' Make Scatter Plot of PCA
#'
#' This functions creates a scatter plot of most significant Principal Components
#'
#' @export
#' @param file_1 main genomic file
#' @param file_2 metadata file
PCA2_plot <- function(file_1,file_2,...) {
library(ggfortify)
if(!grepl(".csv$", file_1)){
stop("Uploaded genomic file must be a .csv file!")
}
if(!grepl(".csv$", file_2)){
stop("Uploaded meta_file must be a .csv file!")
}
genomic_data = read.csv(file_1)
metadata = read.csv(file_2)
#make gene names as row names
rownames(genomic_data) = make.names(genomic_data[,1],unique = TRUE)
genomic_data = genomic_data[,2:ncol(genomic_data)]
genomic_data = as.data.frame(sapply(genomic_data,as.numeric))
genomic_data = na.omit(genomic_data)
t_genomic_data = as.data.frame(t(genomic_data))
t_genomic_data = na.omit(t_genomic_data)
t_genomic_data.pca = prcomp(t_genomic_data,scale. = TRUE,center = TRUE)
#fviz_pca_var(t_genomic_data.pca,
#             col.var = "contrib", # Color by contributions to the PC
#             gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
#             repel = TRUE )
autoplot(t_genomic_data.pca,data=metadata,colour="Time")
}
autoplot(t_genomic_data.pca,data=metadata,colour="Time")
autoplot(t_genomic_data.pca)
autoplot(t_genomic_data.pca,data=metadata,colour="Time")
metadata["Time"]
t_genomic_data.pca
autoplot(t_genomic_data.pca,data=metadata,colour="Time")
rownames(t_genomic_data)
metadata["Time"]
t_genomic_data.pca
t_genomic_data
t_genomic_data.pca[0]
t_genomic_data.pca[1]
t_genomic_data.pca[2]
t_genomic_data.pca[3]
t_genomic_data.pca[1]
rownames(t_genomic_data)
t_genomic_data[0]
t_genomic_data[1]
t_genomic_data[1,]
t_genomic_data[1,5]
t_genomic_data[1,2:4]
genomic_data = read.csv("data/Assignment-2_gene_data.csv")
metadata = read.csv("data/Assignment-2 Meta data sheet .csv")
genomic_data
genomic_data[1,]
genomic_data[,1]
genomic_data[1,1]
genomic_data[1:5,1]
#make gene names as row names
rownames(genomic_data) = make.names(genomic_data[,2],unique = TRUE)
genomic_data = genomic_data[,2:ncol(genomic_data)]
genomic_data = as.data.frame(sapply(genomic_data,as.numeric))
genomic_data = na.omit(genomic_data)
t_genomic_data = as.data.frame(t(genomic_data))
t_genomic_data = na.omit(t_genomic_data)
t_genomic_data.pca = prcomp(t_genomic_data,scale. = TRUE,center = TRUE)
autoplot(t_genomic_data.pca,data=metadata,colour="Time")
#' Make Scatter Plot of PCA
#'
#' This functions creates a scatter plot of most significant Principal Components
#'
#' @export
#' @param file_1 main genomic file
#' @param file_2 metadata file
PCA2_plot <- function(file_1,file_2,...) {
library(ggfortify)
if(!grepl(".csv$", file_1)){
stop("Uploaded genomic file must be a .csv file!")
}
if(!grepl(".csv$", file_2)){
stop("Uploaded meta_file must be a .csv file!")
}
genomic_data = read.csv(file_1)
metadata = read.csv(file_2)
#make gene names as row names
rownames(genomic_data) = make.names(genomic_data[,2],unique = TRUE)
genomic_data = genomic_data[,2:ncol(genomic_data)]
genomic_data = as.data.frame(sapply(genomic_data,as.numeric))
genomic_data = na.omit(genomic_data)
t_genomic_data = as.data.frame(t(genomic_data))
t_genomic_data = na.omit(t_genomic_data)
t_genomic_data.pca = prcomp(t_genomic_data,scale. = TRUE,center = TRUE)
#fviz_pca_var(t_genomic_data.pca,
#             col.var = "contrib", # Color by contributions to the PC
#             gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
#             repel = TRUE )
autoplot(t_genomic_data.pca,data=metadata,colour="Time")
}
autoplot(t_genomic_data.pca,data=metadata,colour="Time")
rm(list= ls())
metadata = read.csv("data/Assignment-2 Meta data sheet .csv")
genomic_data = read.csv("data/Assignment-2_gene_data.csv")
#make gene names as row names
rownames(genomic_data) = make.names(genomic_data[,2],unique = TRUE)
genomic_data[1,1]
genomic_data[2,1]
genomic_data[3,1]
genomic_data[3,1:2]
genomic_data = genomic_data[,3:ncol(genomic_data)]
genomic_data[3,1:2]
genomic_data = as.data.frame(sapply(genomic_data,as.numeric))
genomic_data = na.omit(genomic_data)
t_genomic_data = as.data.frame(t(genomic_data))
t_genomic_data = na.omit(t_genomic_data)
t_genomic_data.pca = prcomp(t_genomic_data,scale. = TRUE,center = TRUE)
autoplot(t_genomic_data.pca,data=metadata,colour="Time")
